{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/activites/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activites/dashboard/ActivityListItemAttendee.tsx","features/activites/dashboard/ActivityListItem.tsx","features/activites/dashboard/ActivityList.tsx","features/activites/dashboard/ActivityListItemPlaceholder.tsx","features/activites/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activites/form/ActivityForm.tsx","features/activites/details/ActivityDetailedChat.tsx","features/activites/details/ActivityDetailedHeader.tsx","features/activites/details/ActivityDetailedInfo.tsx","features/activites/details/ActivityDetailedSidebar.tsx","features/activites/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendence","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","vertical","size","style","width","marginTop","Header","icon","attached","color","Item","active","has","onClick","onChange","Reveal","animated","Content","visible","Button","fluid","hidden","stype","basic","e","preventDefault","handleFollow","ProfileCard","Card","as","Link","to","Image","src","Description","extra","Icon","name","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","ItemDescription","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","boderColor","PhotoUploadWidget","files","revokeObjectURL","preivew","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4283b2da.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if(data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = { \r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\r\n} \r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if(activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }\r\n  ","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null =null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);           \r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false); \r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        \r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            }) \r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendence = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() =>  {\r\n                if(this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if(attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        \r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            } )\r\n        } catch(error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch(error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username) {\r\n                        profile.following ? profile.followingCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return  !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    } \r\n}\r\n\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if( token) { \r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n    \r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    \r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n                 \r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection:', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                }); \r\n            })\r\n        }\r\n    }\r\n    \r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport Calendar from 'react-calendar';\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )  \r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props){\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    } \r\n\r\n    return (\r\n        <Reveal animated='move' >\r\n            <Reveal.Content visible style={{ width: '100%' }} >\r\n                <Button\r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden stype={{ width: '100%' }} >\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default function ProfileCard({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React, { } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, ItemDescription, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <ItemDescription>\r\n                                    <Label basic color='orange' >\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost &&  (\r\n                                <ItemDescription>\r\n                                    <Label basic color='green' >\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary> \r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer( function ActivityDashboard() { \r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{marginRight: '10px'}}/>\r\n                    Reactivites\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activites' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />  \r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [ field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error:'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                     />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer (function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                     />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                    \r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>    \r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                    \r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [ field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [ field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder} \r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks' , value: 'drinks'},\r\n    {text: 'Culture' , value: 'culture'},\r\n    {text: 'Film' , value: 'film'},\r\n    {text: 'Food' , value: 'food'},\r\n    {text: 'Music' , value: 'music'},\r\n    {text: 'Travel' , value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [ field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer( function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>(); \r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activitiy title is required'),\r\n        description: Yup.string().required('The activitiy description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n        \r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps} from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body' >\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendence, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled'/> \r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' :  'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading} \r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendence} >Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled}\r\n                        loading={loading} \r\n                        onClick={updateAttendence} \r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host} }: Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && \r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial , clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}} >{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    \r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return ( \r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        boderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n        <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preivew))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0  && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                        <Button.Group widths={2} >\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='check'/>\r\n                        </Button.Group>\r\n                    </>}\r\n                \r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto,\r\n            uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const[target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n    \r\n    function handleSetMainPhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                <Header floated='left' icon='image' content='Photos' />\r\n                {isCurrentUser && (\r\n                    <Button floated='right' basic \r\n                        content={addPhotoMode ? 'Cancel' : 'AddPhoto'} \r\n                        onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                    />\r\n                )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} /> \r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' +  photo.id &&  loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button\r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash'\r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                            ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n            \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <Tab.Pane>Events Content</Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return() => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}            \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest} : Props ) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport ActivityDashboard from '../../features/activites/dashboard/ActivityDashboard';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activites/form/ActivityForm';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityDetails from '../../features/activites/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer  />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/Activities' component={ActivityDashboard} />\n                <PrivateRoute path='/Activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n            </>\n        )}\n      />    \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n  \r\n    useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n  \r\n    return null;\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport App from './app/layout/App';\nimport './app/layout/styles.css';\nimport { store, StoreContext } from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}